// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)


    PARTS:

    // ins types, false, true
    Not(in=instruction[15], out=AIns);
    Not(in=AIns, out=CIns);
    Xor(a=reset, b=reset, out=false);
    Not(in=false, out=true);

    // ALU computation instruction
    Or(a=AIns,   b=instruction[11], out=zx); 
    Or(a=AIns,   b=instruction[10], out=nx); 
    And(a=CIns,  b=instruction[9],  out=zy);
    And(a=CIns,  b=instruction[8],  out=ny);
    And(a=CIns,  b=instruction[7],  out=f );
    And(a=CIns,  b=instruction[6],  out=no);
     
    //PCLoad
    Not(in=ng, out=notng);
    Not(in=zr, out=notzr);
    And(a=notng, b=notzr, out=pos);
    Not(in=pos, out=notpos);
    Mux8Way(a=false, b=pos, c=zr, d=notng, e=ng, f=notzr, g=notpos, h=true, sel=instruction[0..2], out=isJump);
    And(a=isJump, b=instruction[15], out=PCLoad);
   
    //ALUInSelect
    And(a=instruction[15], b=instruction[12], out=ALUInSelect);
   
    //ARegLoad    
    Or(a=AIns, b=instruction[5], out=ARegLoad);  

    //DRegLoad
    And(a=CIns, b=instruction[4], out=DRegLoad);
    
    //writeM
    And(a=CIns, b=instruction[3], out=writeM);

    //ARegInSelect
    Not(in=instruction[15], out=ARegInSelect);

    // PC & pc (out)
    PC(in=ARegOut, load=PCLoad, inc=true, reset=reset, out=PCOut);
    Mask16to15(in=PCOut, out=pc);
   
    // AReg   
    ARegister(in=ARegIn, load=ARegLoad, out=ARegOut);
    Mux16(a=ALUOut, b=instruction, sel=ARegInSelect, out=ARegIn);

    // DReg
    DRegister(in=ALUOut, load=DRegLoad, out=DRegOut);
  
    // ALU
    Mux16(a=ARegOut, b=inM, sel=ALUInSelect, out=ALUyIn);
    ALU(x=DRegOut, y=ALUyIn, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUOut, zr=zr, ng=ng);

    // outM
    And16(a=ALUOut, b=ALUOut, out=outM);
  
    //addressM
    Mask16to15(in=ARegOut, out=addressM);  
  
}
